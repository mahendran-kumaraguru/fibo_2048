
<center>
<h3> Play Now! </h3>
<table border="3"  onkeydown="hi()" style="table-layout: fixed" id="game_table" width="<%= @game.grid * 50%>" height="<%= @game.grid * 50%>">
	<% @game.data.each do |r| %>
		<tr>
			<% r.each do |v| %>
				<td align="center"><% if (v!=0 && v!="0") %><%= v.to_i %><% end %></td>
			<% end %>
		</tr>
	<% end %>
	<script>
		var data = [];
		var grid_size = 0;
		var counter = 0;
		var free_size = 0;
		var high_score = 0;
		var fibo_series=[0, 1, 1, 2, 3, 5];
		function get_ready() {
			alert("Game Started! Use Arrow Keys to Control!!");
			window.addEventListener('keydown', hi);
			document.getElementById("start_button").hidden = true;
			var game_table= document.getElementById("game_table");
			var target = game_table;
			if(target) {
				var rows = target.getElementsByTagName("TR");
				for(var i=0; i<rows.length; i++) {
					if(rows[i]) {
						var row_data = [];
						var cells = rows[i].getElementsByTagName("TD");
						for(var j=0; j<cells.length; j++) {
							var num = cells[j].innerHTML;
							console.log("cell data at row "+i+", column "+j+" : "+num);
							num = (num == "") ? 0 : num;
							row_data.push(parseInt(num));
							console.log("cell data formatted: "+num);
						}
						console.log("Row data: "+row_data);
						data.push(row_data);
					}
				}
			}
			console.log("Game data: "+data);
			console.log(data);
			grid_size = data.length;
			console.log("Grid size: "+grid_size);
			for(var i=0; i<grid_size; i++)
				for(var j=0; j<grid_size; j++)
					if(data[i][j]==0)
						free_size++;
			document.getElementById("start_button").hidden = true;
			document.getElementById("save_button").hidden = false;
		}
		function hi(e) {

			e = e || window.event;

			if (e.keyCode == '38') {
				// up arrow
				move(-1, 0);
			}
			else if (e.keyCode == '40') {
				// down arrow
				move(1, 0);
			}
			else if (e.keyCode == '37') {
				// left arrow
				move(0, -1);
			}
			else if (e.keyCode == '39') {
				// right arrow
				move(0, 1);
			}
			console.log(data);

		}
		function getOpposite(num) {
			if(num == 0)
				return -1;
			if(num == -1)
				return grid_size-1;
			if(num == 1)
				return 0;
		}
		function putData(r, c, d) {
			counter=0;
			free_size--;
			console.log("setting data at: "+r+", "+c);
			data[r][c] = 1;
			document.getElementById("game_table").getElementsByTagName("TR")[r].getElementsByTagName("TD")[c].innerHTML = 1;
		}
		function getHighScore() {
			high_score = 0;
			data.forEach(function allArrays(elem) {
				elem.forEach(function maxx(elem) {
					high_score = (elem>high_score)? elem : high_score ; 
				})
			});
			return high_score;
		}
		function setRandom(r, c) {
			console.log("Free Size: "+free_size);
			console.log("Setting random number on: "+r+", "+c);
			if(free_size==0) {
				
				alert("Game Over! Your Score: "+getHighScore()+"\nTry Different Direction!");
				return;
			}
			var randomNumber = Math.floor((Math.random() * (grid_size-1))+0.5);
			if(randomNumber>(grid_size-1))
				randomNumber = grid_size-1;
			if(counter++>=(grid_size*2)) {
				console.log((grid_size*2)+" random numbers completed");
				if(r==-1)
					for(var i=0; i<grid_size; i++)
						if(data[i][c]==0) {
							putData(i, c, 1);
							return;
						}
				else if(c==-1)
					for(var j=0; j<grid_size; j++)
						if(data[r][j]==0) {
							putData(r, j, 1);
							return;
						}
				else
				{
					console.log("Can't add a number");
					return;
				}
			}
			
			console.log("random number : "+ randomNumber);
			console.log(data);
			if(r==-1 && data[randomNumber][c]==0)
				putData(randomNumber, c, 1);
			else if(c==-1 && data[r][randomNumber]==0)
				putData(r, randomNumber, 1);
			else
				setRandom(r,c);
		}
		function fibo(index) {
			// console.log("Finding fibo of: "+index);
			if(fibo_series.length>index)
				return fibo_series[index];
			fibo_series[index]=fibo(index-1)+fibo(index-2);
			return fibo_series[index];
		}
		function fibIndex(value) {
			// console.log("Findinf fibIndex of: "+value);
			for(var i=0; i<fibo_series.length; i++) {
				if(fibo_series[i]==value)
					return i;
				if(fibo_series[i]>value) {
					alert(value+" is not a fibonacci number!");
					return 0;
				}
			}
			fibo(i+5);
			return fibIndex(value);
		}
		function nextFibo(value) {
			return fibo(fibIndex(value)+1);
		}
		function getPrevious(current, difference) {
			var next = current-difference-difference;
			if(next<0)
				return 0;
			if(next>=grid_size)
				return grid_size-1;
			return next;
		}
		function drawData() {
			var game_table = document.getElementById("game_table");
			for(var r=0; r<grid_size; r++)
				for(var c=0; c<grid_size; c++) {
					var value = data[r][c];
					if(value==0)
						value = "";
					game_table.getElementsByTagName("TR")[r].getElementsByTagName("TD")[c].innerHTML = value; 
				}
		}
		function move(r, c) {
			console.log("moving row: "+r+" column: "+c);
			var rowStart = 0;
			var rowAdder = 1;
			var colStart = 0;
			var colAdder = 1;
			if(r==-1) {
				rowStart = grid_size-1;
				rowAdder = -1;
			}
			if(c==-1) {
				colStart = grid_size-1;
				colAdder = -1;
			}

			for(var row=rowStart; row<grid_size && row>=0; row+=rowAdder) {
				for(var column=colStart; column<grid_size && column>=0; column+=colAdder) {
					var nextRow = row+r;
					var nextCol = column+c;
					console.log("Current: ["+row+", "+column+"] Next: ["+nextRow+","+nextCol+"]");
					if(nextRow>=0 && nextRow<grid_size && nextCol>=0 && nextCol<grid_size && row>=0 && row<grid_size && column>=0 && column<grid_size) {
						var currentVal = data[row][column];
						var nextVal = data[nextRow][nextCol];
						console.log("current: "+currentVal+" Next: "+nextVal);
						if(currentVal !=0) {
							if(nextVal==0) {
								console.log("Swapping");
								data[nextRow][nextCol] = data[row][column];
								data[row][column] = 0;
								row = getPrevious(row, r);
								column = getPrevious(column, c);

							}
							else if(currentVal==nextFibo(nextVal) || nextVal==nextFibo(currentVal) || (currentVal==1 && nextVal==2) || (currentVal==2 && nextVal==1) ) {
								console.log("adding "+data[row][column]+" with "+data[nextRow][nextCol]);
								data[nextRow][nextCol] += data[row][column];
								data[row][column] = 0;
								free_size++;
								row = getPrevious(row, r);
								column = getPrevious(column, c);
							}
						}
					}

				}
			}
			drawData();
			setRandom(getOpposite(r), getOpposite(c));
		}
		function save_game() {
			$.ajax({
			url: "/game/"+document.baseURI.substring(document.baseURI.lastIndexOf("/")+1, document.baseURI.length)+"/save",
			type: "POST",
			data: {"grid_data": data, "score": getHighScore(), "free_size": free_size},
			success: function(data) {
			alert('Successfully Saved!');
			}
			});
		}
	</script>
</table>
<br/>
<!-- <table style="table-layout: fixed">
	<tr><td colspan="3" align="center">Up</td></tr>
	<tr><td align="center">Left</td><td align="center" width="35"></td><td align="center">Right</td></tr>
	<tr><td colspan="3" align="center">Down</td></tr>
</table>
<br/><br/> -->
<button id="start_button" onclick="get_ready()">Start!</button>
<button id="save_button" onclick="save_game()" hidden="true">Save and Exit!</button>
</center>